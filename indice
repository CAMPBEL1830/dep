import pandas as pd
from difflib import SequenceMatcher

# Fonction pour calculer l'indice de ressemblance
def similarity_ratio(a, b):
    return SequenceMatcher(None, a, b).ratio()

# Fonction principale pour créer le dictionnaire des 5 meilleurs correspondances
def find_top_5_matches(df, column_name):
    # Liste des éléments uniques
    unique_elements = df[column_name].unique().tolist()
    
    # Dictionnaire pour stocker les correspondances
    match_dict = {}
    
    for elem in unique_elements:
        # Liste pour stocker les ratios et les éléments correspondants
        match_list = []
        
        for compare_elem in df[column_name]:
            if elem != compare_elem:
                ratio = similarity_ratio(elem, compare_elem)
                match_list.append((compare_elem, ratio))
        
        # Trier les correspondances par ratio décroissant
        match_list.sort(key=lambda x: x[1], reverse=True)
        
        # Prendre les 5 meilleurs
        top_5_matches = match_list[:5]
        
        # Stocker les meilleurs matchs dans le dictionnaire
        match_dict[elem] = top_5_matches
    
    return match_dict

# Lire le fichier Excel
file_path = 'chemin/vers/ton_fichier.xlsx'
df = pd.read_excel(file_path)

# Nom de la colonne contenant les éléments à comparer
column_name = 'nom_de_la_colonne'

# Appliquer la fonction
top_5_matches = find_top_5_matches(df, column_name)

# Affichage du résultat
for elem, matches in top_5_matches.items():
    print(f"{elem}: {matches}")

# Optionnel : enregistrer les résultats dans un nouveau fichier Excel
results_df = pd.DataFrame(
    [(elem, match, ratio) for elem, matches in top_5_matches.items() for match, ratio in matches],
    columns=['Élément', 'Meilleur Match', 'Indice de Ressemblance']
)
results_df.to_excel('chemin/vers/ton_resultat.xlsx', index=False)




import pandas as pd
from difflib import SequenceMatcher

# Fonction pour calculer l'indice de ressemblance
def similarity_ratio(a, b):
    return SequenceMatcher(None, a, b).ratio()

# Fonction principale pour créer le dictionnaire des 5 meilleurs correspondances uniques
def find_top_5_unique_matches(df, column_name):
    # Liste des éléments uniques
    unique_elements = df[column_name].unique().tolist()
    
    # Dictionnaire pour stocker les correspondances
    match_dict = {}
    
    # Dictionnaire pour garder trace des meilleurs matchs déjà pris
    taken_matches = set()
    
    for elem in unique_elements:
        # Liste pour stocker les ratios et les éléments correspondants
        match_list = []
        
        for compare_elem in df[column_name]:
            if elem != compare_elem:
                ratio = similarity_ratio(elem, compare_elem)
                match_list.append((compare_elem, ratio))
        
        # Trier les correspondances par ratio décroissant
        match_list.sort(key=lambda x: x[1], reverse=True)
        
        # Prendre les 5 meilleurs disponibles et uniques
        top_5_matches = []
        for match, ratio in match_list:
            if len(top_5_matches) >= 5:
                break
            if match not in taken_matches:
                top_5_matches.append((match, ratio))
                taken_matches.add(match)
        
        # Stocker les meilleurs matchs dans le dictionnaire
        match_dict[elem] = top_5_matches
    
    return match_dict

# Lire le fichier Excel
file_path = 'chemin/vers/ton_fichier.xlsx'
df = pd.read_excel(file_path)

# Nom de la colonne contenant les éléments à comparer
column_name = 'nom_de_la_colonne'

# Appliquer la fonction
top_5_matches = find_top_5_unique_matches(df, column_name)

# Affichage du résultat
for elem, matches in top_5_matches.items():
    print(f"{elem}: {matches}")

# Optionnel : enregistrer les résultats dans un nouveau fichier Excel
results_df = pd.DataFrame(
    [(elem, match, ratio) for elem, matches in top_5_matches.items() for match, ratio in matches],
    columns=['Élément', 'Meilleur Match', 'Indice de Ressemblance']
)
results_df.to_excel('chemin/vers/ton_resultat.xlsx', index=False)






import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer

# Charger le fichier Excel
df = pd.read_excel('ton_fichier.xlsx')

# Spécifier la colonne à traiter
colonne = df['nom_de_la_colonne']

# Extraire les éléments uniques
elements_uniques = colonne.unique().tolist()

# Initialiser un dictionnaire pour stocker les correspondances
correspondances = {}

# Fonction pour calculer la similarité Cosine entre deux éléments textuels
def calculer_similarite(element1, element2):
    vect = CountVectorizer().fit_transform([element1, element2])
    sim = cosine_similarity(vect)
    return sim[0][1]

# Comparer chaque élément unique avec tous les autres éléments
for element in elements_uniques:
    meilleurs_scores = {}
    for autre_element in colonne:
        if element != autre_element:
            score = calculer_similarite(element, autre_element)
            meilleurs_scores[autre_element] = score
    
    # Trouver l'élément avec le meilleur score de ressemblance
    meilleur_correspondant = max(meilleurs_scores, key=meilleurs_scores.get)
    
    # Assigner l'élément correspondant à l'élément unique
    if meilleur_correspondant not in correspondances.values():
        correspondances[element] = meilleur_correspondant

# Afficher les correspondances
print(correspondances)






import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer

# Charger le fichier Excel
df = pd.read_excel('ton_fichier.xlsx')

# Spécifier la colonne à traiter
colonne = df['nom_de_la_colonne']

# Extraire les éléments uniques
elements_uniques = colonne.unique().tolist()

# Initialiser un dictionnaire pour stocker les correspondances
correspondances = {}

# Fonction pour calculer la similarité Cosine entre deux éléments textuels
def calculer_similarite(element1, element2):
    vect = CountVectorizer().fit_transform([element1, element2])
    sim = cosine_similarity(vect)
    return sim[0][1]

# Comparer chaque élément unique avec tous les autres éléments
for element in elements_uniques:
    meilleurs_scores = {}
    for autre_element in colonne:
        if element != autre_element:
            score = calculer_similarite(element, autre_element)
            meilleurs_scores[autre_element] = score
    
    # Trouver l'élément avec le meilleur score de ressemblance
    meilleur_correspondant = max(meilleurs_scores, key=meilleurs_scores.get)
    
    # Assigner l'élément correspondant à l'élément unique
    if meilleur_correspondant not in correspondances.values():
        correspondances[element] = meilleur_correspondant

# Convertir le dictionnaire en DataFrame
df_correspondances = pd.DataFrame(list(correspondances.items()), columns=['Tiers Unique', 'Meilleur Correspondant'])

# Enregistrer le DataFrame dans un fichier Excel
df_correspondances.to_excel('correspondances.xlsx', index=False)

print("Le fichier 'correspondances.xlsx' a été créé avec succès.")






import pandas as pd
from fuzzywuzzy import process

def create_similarity_dict(df, column_name):
    # Extraction des éléments uniques
    unique_elements = df[column_name].unique()
    
    # Initialisation du dictionnaire final
    similarity_dict = {}

    # Parcourir chaque élément unique pour calculer les indices de ressemblance
    for unique_elem in unique_elements:
        # Calculer les indices de ressemblance avec tous les éléments de la colonne
        matches = process.extract(unique_elem, df[column_name], limit=len(df))
        
        # Trier les matches par score, enlever les doublons de noms, et récupérer les 5 meilleurs
        matches = sorted(set(matches), key=lambda x: x[1], reverse=True)
        best_matches = [match for match in matches if match[0] != unique_elem][:5]

        # Ajouter au dictionnaire
        similarity_dict[unique_elem] = best_matches

    return similarity_dict

def save_to_excel(similarity_dict, output_file):
    # Initialisation d'une liste pour créer le DataFrame final
    rows = []

    # Construction du DataFrame à partir du dictionnaire
    for unique_elem, best_matches in similarity_dict.items():
        row = [unique_elem] + [f"{match[0]} ({match[1]})" for match in best_matches]
        rows.append(row)

    # Conversion en DataFrame
    columns = ["Element Unique"] + [f"Match {i+1}" for i in range(5)]
    result_df = pd.DataFrame(rows, columns=columns)

    # Sauvegarde dans un fichier Excel
    result_df.to_excel(output_file, index=False)

# Exemple d'utilisation
df = pd.read_excel('votre_fichier.xlsx')
column_name = 'nom_de_la_colonne'

# Créer le dictionnaire de similarités
similarity_dict = create_similarity_dict(df, column_name)

# Sauvegarder le résultat dans un fichier Excel
output_file = 'similarity_results.xlsx'
save_to_excel(similarity_dict, output_file)

print(f"Les résultats ont été enregistrés dans {output_file}.")
