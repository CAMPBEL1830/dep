import pandas as pd

# Supposons que data5 est ton DataFrame et qu'il contient les colonnes nécessaires

# Calculer les moyennes pour chaque colonne en fonction du groupe
tableau_recapitulatif = data5.groupby('groupe').agg({
    'age': 'mean',
    'montant_dossier': 'mean',
    'anciennete': 'mean',
    'duree': 'mean',
    'taux_interet': 'mean'
}).reset_index()

# Renommer les colonnes pour plus de clarté
tableau_recapitulatif.rename(columns={
    'age': 'Âge Moyen',
    'montant_dossier': 'Montant Dossier Moyen',
    'anciennete': 'Ancienneté Moyenne',
    'duree': 'Durée Moyenne',
    'taux_interet': 'Taux d\'Intérêt Moyen'
}, inplace=True)

# Affichage du tableau récapitulatif
print(tableau_recapitulatif)

# Enregistrer le tableau récapitulatif dans un fichier Excel
tableau_recapitulatif.to_excel('tableau_recapitulatif.xlsx', index=False)

print("Le tableau récapitulatif a été enregistré dans le fichier tableau_recapitulatif.xlsx.")


resultat = data5.groupby('groupe')['segment'].apply(lambda x: ', '.join(x)).reset_index()


compte_segments = data5.groupby('groupe')['segment'].value_counts().unstack(fill_value=0)




repartition = data5.groupby(['secteur_d_activite', 'groupe']).size().unstack(fill_value=0)
repartition = data5.groupby(['agence', 'groupe']).size().unstack(fill_value=0)








import pandas as pd
import matplotlib.pyplot as plt

# Exemple de DataFrame
# data5 = pd.DataFrame({
#     'agence': [...],
#     'groupe': [...],
#     # autres colonnes
# })

# Compte les occurrences de chaque groupe pour chaque agence
compte_groupes = data5.groupby(['agence', 'groupe']).size().unstack(fill_value=0)

# Création du graphique
ax = compte_groupes.plot(kind='bar', stacked=False, figsize=(12, 8))

# Paramétrage du graphique
plt.title('Répartition des groupes par agence')
plt.xlabel('Agence')
plt.ylabel('Nombre d\'occurrences')
plt.xticks(rotation=45, ha='right')  # Rotation des labels de l'axe des x pour plus de lisibilité
plt.legend(title='Groupe')

# Affichage du graphique
plt.tight_layout()  # Ajuste la disposition pour éviter les chevauchements
plt.show()




data5['groupe'] = data5['groupe'].replace({1: 0, 0: 1})




data5.loc[data5['groupe'] == 1, ['revenu', 'reste_a_vivre']] += 10000



import pandas as pd
import matplotlib.pyplot as plt

# Exemple de DataFrame
# data5 = pd.DataFrame({
#     'groupe': [0, 0, 1, 0, 1],
#     'solve_duree': [-13, -12, -10, 0, 5],
#     # autres colonnes
# })

# Filtrer les lignes où le groupe est égal à 0
data_groupe_0 = data5[data5['groupe'] == 0]

# Compter le nombre d'éléments dans chaque zone de solve_duree
counts = [
    (data_groupe_0['solve_duree'] < -12).sum(),
    (data_groupe_0['solve_duree'] == -12).sum(),
    (data_groupe_0['solve_duree'] > -12).sum()
]

# Libellés pour chaque zone
labels = [
    'Solve duree < -12',
    'Solve duree = -12',
    'Solve duree > -12'
]

# Créer le diagramme circulaire
plt.figure(figsize=(8, 8))
plt.pie(counts, labels=labels, autopct='%1.1f%%', startangle=140)

# Ajouter une légende
plt.legend(labels, title="Zones de Solve Duree", loc="upper left")

# Ajouter un titre
plt.title('Répartition des éléments du groupe 0 selon Solve Duree')

# Afficher le graphique



 Créer data_test avec les lignes où l'année d'octroi est 2022
data_test = data5[data5['année_d_octroi'] == 2022]

# Mettre à jour data5 avec le reste des lignes (année d'octroi différente de 2022)
data5 = data5[data5['année_d_octroi'] != 2022]

plt.show()


# Compter le nombre de crédits par année et par groupe
nombre_credits = data5.groupby(['année', 'groupe']).size().unstack(fill_value=0)
